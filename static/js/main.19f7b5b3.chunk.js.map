{"version":3,"sources":["components/login.js","hooks/useLocalStorage.js","contexts/contactsProvider.js","contexts/chatsProvider.js","components/MyChats.js","components/MyContacts.js","components/NewChatModal.js","components/NewContactModal.js","components/Sidebar.js","components/chatSection.js","components/Dashboard.js","components/App.js","index.js"],"names":["Login","setId","IDRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","value","Group","Label","Control","type","ref","required","Button","onClick","uuidv4","variant","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","name","id","prevContact","ChatsContext","useChats","ChatsProvider","chats","setChats","selectedChatIndex","setSelectedChatIndex","formattedChats","map","chat","index","recipientIds","recipientId","contact","find","messages","message","sender","fromMe","senderName","selected","selectedChat","selectChatIndex","sendMessage","text","prevChats","madeChange","newMessage","newChats","a","b","length","sort","every","element","addMessageToChat","createChat","prevChat","MyContacts","ListGroup","Item","action","active","join","NewChatModal","closeModal","selectedContactIds","setSelectedContactIds","Modal","Header","closeButton","Body","controlId","Check","includes","label","onChange","contactId","prevSelectedContactIds","filter","prevId","NewContactModal","nameRef","idRef","chatsEventKey","contactsEventKey","Sidebar","Id","activeKey","setActiveKey","chatsOpen","modalOpen","setModalOpen","width","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","ChatSection","setText","recipient","InputGroup","as","target","resize","Append","Dashboard","App","dashboard","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19f7b5b3.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction Login( { setId } ) {\r\n\r\nconst IDRef= useRef();\r\n\r\nfunction submitHandler(e) {\r\n    e.preventDefault();\r\n    setId(IDRef.current.value);\r\n}\r\nfunction createNewId() {\r\n    setId(uuidv4());\r\n}\r\n\r\n    return (\r\n        <Container className= \"align-items-center d-flex\" style= { {height:\"100vh\"} }>\r\n            <Form onSubmit= {submitHandler} className= \"w-100\">\r\n                <Form.Group>\r\n                    <Form.Label>Enter your ID</Form.Label>\r\n                    <Form.Control type= \"text\" ref={IDRef} required></Form.Control>\r\n                </Form.Group>\r\n                <Button type= \"submit\" className= \"mr-3\">Login</Button>\r\n                <Button onClick= {createNewId} variant= \"secondary\">create new ID</Button>\r\n            </Form>\r\n        </Container>        \r\n    )\r\n}\r\n\r\nexport default Login;","import { useEffect, useState } from 'react';\r\n\r\nconst prefix = \"messaging-app-\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const prefixedKey = prefix + key;\r\n    const [value, setValue] = useState( () => {\r\n        const jsonValue = localStorage.getItem(prefixedKey);\r\n        if (jsonValue !== null)\r\n            return JSON.parse(jsonValue)\r\n        if (typeof initialValue === \"function\") {\r\n            return initialValue()\r\n        } else {\r\n            return initialValue\r\n        } \r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue];\r\n}\r\n","import React, { useContext } from 'react';\r\nimport useLocalStorage from \"./../hooks/useLocalStorage\";\r\n\r\nconst ContactsContext = React.createContext();\r\n\r\nexport function useContacts() {\r\n    return useContext(ContactsContext);\r\n}\r\n\r\nexport function ContactsProvider( { children } ) {\r\n\r\nconst [contacts, setContacts] = useLocalStorage('contacts', []);\r\nfunction createContact(name, id) {\r\n    setContacts(prevContact => {\r\n        return [...prevContact, {name, id}]\r\n    })\r\n}\r\n\r\n    return (\r\n        <ContactsContext.Provider value= { {contacts, createContact} }>\r\n            {children}\r\n        </ContactsContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport useLocalStorage from \"./../hooks/useLocalStorage\";\r\nimport { useContacts } from \"./contactsProvider\"\r\n\r\nconst ChatsContext = React.createContext();\r\n\r\nexport function useChats() {\r\n    return useContext(ChatsContext);\r\n}\r\n\r\nexport function ChatsProvider( { id, children } ) {\r\n\r\nconst { contacts } = useContacts();\r\nconst [chats, setChats] = useLocalStorage('chats', []);\r\nconst [selectedChatIndex, setSelectedChatIndex] = useState(0);\r\n\r\nfunction createChat(recipientIds) {\r\n    setChats(prevChat => {\r\n        return [...prevChat, {recipientIds, messages: []}]\r\n    })\r\n}\r\nfunction addMessageToChat( { recipientIds, text, sender } ) {\r\n    setChats( prevChats => {\r\n        let madeChange = false;\r\n        const newMessage = { sender, text };\r\n        const newChats = prevChats.map( chat => {\r\n            if(arrayEquality(chat.recipientIds, recipientIds)) {\r\n                madeChange = true;\r\n                return {\r\n                    ...chat, \r\n                    messages: [...chat.messages, newMessage]\r\n                }\r\n            }\r\n            return chat\r\n        })\r\n        if (madeChange) {\r\n            return newChats\r\n        } else {\r\n            return [...prevChats, { recipientIds, message: [newMessage] }]\r\n        }\r\n    })\r\n}\r\nfunction sendMessage( recipientIds, text ) {\r\n    addMessageToChat( { recipientIds, text, sender: id } );\r\n}\r\n\r\nconst formattedChats = chats.map( (chat, index) => {\r\n    const recipientIds = chat.recipientIds.map( recipientId => {\r\n        const contact = contacts.find(contact => {\r\n            return contact.id === recipientId\r\n        })\r\n        const name = ( contact && contact.name )|| recipientId;\r\n        return { id: recipientId, name }\r\n    })\r\n\r\n    const messages = chat.messages.map( message => {\r\n        const contact = contacts.find(contact => {\r\n            return contact.id === message.sender\r\n        })\r\n        const name = ( contact && contact.name )|| message.sender;\r\n        const fromMe = id === message.sender;\r\n        return { ...message, senderName: name, fromMe }\r\n    })\r\n\r\n    const selected = index === selectedChatIndex;\r\n    return { ...chats, messages, recipientIds, selected }\r\n})\r\n\r\nconst value = {\r\n    chats: formattedChats, \r\n    selectedChat: formattedChats[selectedChatIndex], \r\n    selectChatIndex: setSelectedChatIndex, \r\n    sendMessage, \r\n    createChat\r\n}\r\n\r\n    return (\r\n        <ChatsContext.Provider value= { value }>\r\n            {children}\r\n        </ChatsContext.Provider>\r\n    )\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n    if(a.length !== b.length) {\r\n        return false\r\n    } else {\r\n        a.sort();\r\n        b.sort();\r\n\r\n        return a.every((element, index) => {\r\n            return element === b[index]\r\n        } )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { useChats } from \"./../contexts/chatsProvider\";\r\n\r\nexport default function MyContacts() {\r\n\r\nconst { chats, selectChatIndex } = useChats();\r\n\r\n    return (\r\n        <ListGroup variant= \"flush\">\r\n            { chats.map( (chat, index) => (\r\n                <ListGroup.Item \r\n                    key= { index }\r\n                    action \r\n                    onClick = {() => selectChatIndex(index)}\r\n                    active= {chat.selected}\r\n                > \r\n                    { chat.recipientIds.map( recipientId => recipientId.name ).join(', ') }\r\n                </ListGroup.Item> \r\n            ) ) }\r\n        </ListGroup>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { useContacts } from \"./../contexts/contactsProvider\";\r\n\r\nexport default function MyContacts() {\r\n\r\nconst { contacts } = useContacts();\r\n\r\n    return (\r\n        <ListGroup variant= \"flush\">\r\n            { contacts.map( contact => (\r\n               <ListGroup.Item key= { contact.id }> \r\n                    { contact.name }\r\n               </ListGroup.Item> \r\n            ) ) }\r\n        </ListGroup>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"./../contexts/contactsProvider\";\r\nimport { useChats } from \"./../contexts/chatsProvider\";\r\n\r\n\r\nexport default function NewChatModal( { closeModal } ) {\r\n\r\nconst [selectedContactIds, setSelectedContactIds] = useState([]);\r\nconst { contacts } = useContacts();\r\nconst { createChat } = useChats();\r\n\r\nfunction handleCheckboxChange(contactId) {\r\n    setSelectedContactIds( prevSelectedContactIds => {\r\n        if(selectedContactIds.includes(contactId)) {\r\n            return (\r\n                prevSelectedContactIds.filter(prevId => (prevId !== contactId))\r\n            )\r\n        } else {\r\n            return [...prevSelectedContactIds, contactId]\r\n        }\r\n    })\r\n}\r\nfunction handleSubmit(e) {\r\n    e.preventDefault();\r\n    createChat(selectedContactIds);\r\n    closeModal();\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <Modal.Header closeButton>\r\n                <h4>Create Chat</h4>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit= {handleSubmit}>\r\n                    { contacts.map(contact => (\r\n                        <Form.Group controlId= {contact.id} key= {contact.id}>\r\n                            <Form.Check \r\n                                type= \"checkbox\"\r\n                                value= {selectedContactIds.includes(contact.id)}\r\n                                label= {contact.name}\r\n                                onChange= { () => handleCheckboxChange(contact.id) }\r\n                            />\r\n                        </Form.Group>\r\n                    )) }\r\n                    <Button type= \"submit\">\r\n                        Add Chat\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/contactsProvider\";\r\n\r\nexport default function NewContactModal( { closeModal } ) {\r\n\r\nconst nameRef = useRef();\r\nconst idRef = useRef();\r\nconst { createContact } = useContacts();\r\n \r\nfunction handleSubmit(e) {\r\n    e.preventDefault();\r\n    createContact(nameRef.current.value, idRef.current.value);\r\n    closeModal();\r\n}\r\n    return (\r\n        <div>\r\n            <Modal.Header closeButton>\r\n                <h4>Create Contact</h4>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit= {handleSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>\r\n                            Enter Name\r\n                        </Form.Label>\r\n                        <Form.Control type= \"text\" ref= {nameRef} required>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>\r\n                            Enter ID\r\n                        </Form.Label>\r\n                        <Form.Control type= \"text\" ref= {idRef} required>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Button type= \"submit\">\r\n                        Add Contact\r\n                    </Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Tab, Nav, Button, Modal } from \"react-bootstrap\";\r\nimport MyChats from \"./MyChats\";\r\nimport MyContacts from \"./MyContacts\";\r\nimport NewChatModal from \"./NewChatModal\";\r\nimport NewContactModal from \"./NewContactModal\";\r\n\r\nconst chatsEventKey = 'Chats';\r\nconst contactsEventKey = 'Contacts';\r\n\r\nexport default function Sidebar( { Id } ) {\r\n\r\nconst [activeKey, setActiveKey] = useState(chatsEventKey);\r\nconst chatsOpen = activeKey === chatsEventKey;\r\nconst [modalOpen, setModalOpen] = useState(false);\r\n\r\nfunction closeModal() {\r\n    setModalOpen(false);\r\n}\r\n\r\n    return (\r\n        <div style= {{width: \"25vw\"}} className= \"d-flex flex-column\">\r\n            <Tab.Container activeKey= {activeKey} onSelect= {setActiveKey}> \r\n                <Nav variant= \"tabs\" className= \"justify-content-center\">\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey= {chatsEventKey}>\r\n                            Chats\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey= {contactsEventKey}>\r\n                            Contacts\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n                <Tab.Content className= \"border-right overflow-auto flex-grow-1\">\r\n                    <Tab.Pane eventKey= {chatsEventKey}>\r\n                        <MyChats/>\r\n                    </Tab.Pane>\r\n                    <Tab.Pane eventKey= {contactsEventKey}>\r\n                        <MyContacts/>\r\n                    </Tab.Pane>\r\n                </Tab.Content>\r\n                <div className= \"p-2 border-top border-right small\">\r\n                    your ID: <span className= \"text-muted\">{Id}</span>\r\n                </div>\r\n                <Button className= \"rounded-0\" onClick= { () => setModalOpen(true) }>\r\n                    New {chatsOpen ? 'Chat' : 'Contact'}\r\n                </Button>\r\n            </Tab.Container>\r\n\r\n            <Modal show= {modalOpen} onHide= {closeModal}>\r\n                {chatsOpen ? <NewChatModal closeModal= {closeModal} /> : <NewContactModal closeModal= {closeModal}/>}\r\n            </Modal> \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { useChats } from \"./../contexts/chatsProvider\"\r\n\r\nexport default function ChatSection() {\r\n\r\nconst [text, setText] = useState('');\r\nconst { sendMessage, selectedChat } = useChats();\r\n\r\nfunction handleSubmit(e) {\r\n    e.preventDefault();\r\n    sendMessage(\r\n        selectedChat.recipientIds.map( recipient => recipient.id ), \r\n        text\r\n    )\r\n    setText('');\r\n}\r\n\r\n    return (\r\n        <div className= \"d-flex flex-column flex-grow-1\">\r\n            <div className= \"flex-grow-1 overflow-auto\">\r\n                <div className= \"d-flex flex-column align-items-start justify-content-end px-3\">\r\n                    {selectedChat.messages.map( (message,index) => {\r\n                        return (\r\n                            <div key= {index} className= {`my-1 d-flex flex-column ${message.fromMe ? 'align-self-end' : '' }`}>\r\n                                <div className= {`rounded px-2 py-1 ${message.fromMe ? 'bg-primary text-white' : 'border' }`}>\r\n                                    {message.text}\r\n                                </div>\r\n                                <div className= {`text-muted small ${message.fromMe ? 'text-right' : '' }` }>\r\n                                    { message.fromMe ? 'you' : message.senderName }\r\n                                </div>\r\n                            </div> \r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Form onSubmit= {handleSubmit}>\r\n                <Form.Group className= \"m-2\">\r\n                    <InputGroup>\r\n                        <Form.Control\r\n                            as= \"textarea\" \r\n                            required\r\n                            value= {text}\r\n                            onChange= {e => setText(e.target.value)}\r\n                            style= {{ height: \"75px\", resize: 'none' }}\r\n                        />\r\n                        <InputGroup.Append>\r\n                            <Button className= \"p-3\" type= \"submit\" >Send</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Sidebar from \"./Sidebar\";\r\nimport { useChats } from \"./../contexts/chatsProvider\";\r\nimport ChatSection from \"./chatSection\"\r\n\r\nexport default function Dashboard( {Id} ) {\r\n\r\nconst { selectedChat } = useChats();\r\n\r\n    return (\r\n        <div className= \"d-flex\" style= { {height: \"100vh\"} }>\r\n            <Sidebar Id= {Id} />\r\n            { selectedChat && <ChatSection /> }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport './../App.css';\nimport Login from \"./login\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Dashboard from \"./Dashboard\";\nimport { ContactsProvider } from \"../contexts/contactsProvider\";\nimport { ChatsProvider } from \"../contexts/chatsProvider\";\n\n\nfunction App() {\n\nconst [Id, setId] = useLocalStorage('Id');\n\nconst dashboard = (\n  <ContactsProvider>\n    <ChatsProvider id= {Id} >\n      <Dashboard Id= {Id} />\n    </ChatsProvider>\n  </ContactsProvider>\n)\n\n  return (\n    <div className=\"App\">\n      {Id ? dashboard : <Login setId={setId} />}\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}